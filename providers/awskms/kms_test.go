package awskms

import (
	"bytes"
	"context"
	"encoding/binary"
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/credentials"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/dgraph-io/ristretto"
	"github.com/stretchr/testify/suite"

	"github.com/bincyber/go-sqlcrypter"
)

const (
	KmsKeyID    = "b8fac04c-ed81-4283-8857-7b9fce25bc3d"
	KmsKeyAlias = "alias/sqlcrypter"
)

// getLocalKMSClient returns a KMS client configured to make
// requests to local-kms: https://github.com/nsmithuk/local-kms
//
// See: https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/endpoints/
func getLocalKMSClient() *kms.Client {
	customResolver := aws.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (aws.Endpoint, error) {
		return aws.Endpoint{
			PartitionID:   "aws",
			URL:           "http://localhost:9090",
			SigningRegion: "us-west-2",
		}, nil
	})

	cfg, _ := config.LoadDefaultConfig(context.TODO(),
		config.WithEndpointResolverWithOptions(customResolver),
		config.WithRegion("us-west-2"),
		config.WithCredentialsProvider(credentials.NewStaticCredentialsProvider("AKID", "SECRET_KEY", "TOKEN")),
	)

	client := kms.NewFromConfig(cfg)
	return client
}

type KMSCrypterTestSuite struct {
	suite.Suite
	client     *kms.Client
	kmsCrypter sqlcrypter.Crypterer
}

func (s *KMSCrypterTestSuite) SetupTest() {
	s.client = getLocalKMSClient()

	kmsCrypter, _ := New(context.Background(), s.client, KmsKeyAlias)
	s.kmsCrypter = kmsCrypter
}

func (s *KMSCrypterTestSuite) Test_New() {
	r := s.Require()

	kmsCrypter, err := New(context.Background(), s.client, KmsKeyAlias)

	r.Nil(err)
	r.IsType(&KMSCrypter{}, kmsCrypter)
}

func (s *KMSCrypterTestSuite) Test_New_nil_kms_client() {
	r := s.Require()

	_, err := New(context.Background(), nil, KmsKeyID)
	r.NotNil(err)
}

func (s *KMSCrypterTestSuite) Test_New_nil_keyID() {
	r := s.Require()

	_, err := New(context.Background(), s.client, "")
	r.NotNil(err)
}

func (s *KMSCrypterTestSuite) Test_New_GenerateDataKey_error() {
	r := s.Require()

	cfg, err := config.LoadDefaultConfig(context.Background())
	r.Nil(err)

	client := kms.NewFromConfig(cfg)

	_, err = New(context.Background(), client, "nonexistant-kms-key")
	r.NotNil(err)
	r.Contains(err.Error(), "failed to retrieve data key")
}

func (s *KMSCrypterTestSuite) Test_Encrypt() {
	r := s.Require()

	plaintext := "Hello World"

	reader := bytes.NewBufferString(plaintext)
	writer := new(bytes.Buffer)

	err := s.kmsCrypter.Encrypt(writer, reader)
	r.Nil(err)
	r.NotEqual(plaintext, writer.String())

	// Verify the writer's contents is structured as expected
	var keyLength uint8
	err = binary.Read(writer, binary.LittleEndian, &keyLength)
	r.Nil(err)

	key := writer.Next(int(keyLength))
	nonce := writer.Next(12)
	ciphertext := writer.Next(27)

	r.Len(key, 140)
	r.Len(nonce, 12)
	r.Len(ciphertext, 27)
}

func (s *KMSCrypterTestSuite) Test_Decrypt_current_DEK() {
	r := s.Require()

	plaintext := "Hello World"

	reader := bytes.NewBufferString(plaintext)
	writer := new(bytes.Buffer)

	err := s.kmsCrypter.Encrypt(writer, reader)
	r.Nil(err)

	reader = new(bytes.Buffer)

	err = s.kmsCrypter.Decrypt(reader, writer)
	r.Nil(err)
	r.Equal(plaintext, reader.String())
}

func (s *KMSCrypterTestSuite) Test_Decrypt_previous_DEK() {
	r := s.Require()

	plaintext := "Hello World"

	ciphertext := []byte{0x8c, 0x4b, 0x61, 0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x6b, 0x6d, 0x73, 0x3a, 0x65, 0x75, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x2d, 0x32, 0x3a, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x3a, 0x6b, 0x65, 0x79, 0x2f, 0x62, 0x38, 0x66, 0x61, 0x63, 0x30, 0x34, 0x63, 0x2d, 0x65, 0x64, 0x38, 0x31, 0x2d, 0x34, 0x32, 0x38, 0x33, 0x2d, 0x38, 0x38, 0x35, 0x37, 0x2d, 0x37, 0x62, 0x39, 0x66, 0x63, 0x65, 0x32, 0x35, 0x62, 0x63, 0x33, 0x64, 0x0, 0x0, 0x0, 0x0, 0xfb, 0x25, 0xe9, 0x99, 0xab, 0xde, 0xb8, 0xc4, 0x99, 0xbb, 0x1f, 0x79, 0x45, 0xb3, 0xe2, 0x53, 0x69, 0x65, 0x61, 0xa5, 0xae, 0xaa, 0x2f, 0x3b, 0x36, 0xaf, 0xce, 0xad, 0xfa, 0x4d, 0xc7, 0x42, 0x5, 0x3d, 0xd8, 0xcf, 0xea, 0x13, 0x11, 0xb5, 0x79, 0x87, 0x67, 0x3c, 0x54, 0x98, 0x5d, 0xeb, 0xa6, 0x1e, 0xd9, 0x89, 0xf1, 0x4c, 0x8d, 0x52, 0x65, 0x54, 0xb6, 0xf9, 0x87, 0xd0, 0x9b, 0xc2, 0x5f, 0x7e, 0x64, 0xa, 0xdf, 0x3, 0xb3, 0xea, 0x70, 0xb8, 0x7d, 0xb8, 0x49, 0xa5, 0xf9, 0x26, 0x39, 0x39, 0xc, 0x62, 0x9a, 0x5e, 0x47, 0x5c, 0x48, 0xe4, 0x8e, 0xe8, 0x91, 0x61, 0x70, 0xd5, 0xdd, 0x2e, 0x5d}

	reader := bytes.NewReader(ciphertext)
	writer := new(bytes.Buffer)

	err := s.kmsCrypter.Decrypt(writer, reader)
	r.Nil(err)
	r.Equal(plaintext, writer.String())
}

func (s *KMSCrypterTestSuite) Test_Decrypt_previous_DEK_cached() {
	r := s.Require()

	cache, _ := ristretto.NewCache(&ristretto.Config{
		NumCounters: 1000,
		MaxCost:     100,
		BufferItems: 64,
	})

	key := []byte{0xfd, 0xef, 0x2, 0x56, 0x2f, 0xe1, 0xd, 0x35, 0x92, 0x8c, 0x33, 0x58, 0x7d, 0x83, 0xe9, 0x52, 0xd2, 0x98, 0x26, 0xa0, 0xba, 0x4e, 0x64, 0x50, 0x4b, 0xfa, 0xfc, 0xc1, 0x8e, 0xd9, 0x55, 0xe5}

	encryptedKey := []byte{0x4b, 0x61, 0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x6b, 0x6d, 0x73, 0x3a, 0x65, 0x75, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x2d, 0x32, 0x3a, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x3a, 0x6b, 0x65, 0x79, 0x2f, 0x62, 0x38, 0x66, 0x61, 0x63, 0x30, 0x34, 0x63, 0x2d, 0x65, 0x64, 0x38, 0x31, 0x2d, 0x34, 0x32, 0x38, 0x33, 0x2d, 0x38, 0x38, 0x35, 0x37, 0x2d, 0x37, 0x62, 0x39, 0x66, 0x63, 0x65, 0x32, 0x35, 0x62, 0x63, 0x33, 0x64, 0x0, 0x0, 0x0, 0x0, 0xfb, 0x25, 0xe9, 0x99, 0xab, 0xde, 0xb8, 0xc4, 0x99, 0xbb, 0x1f, 0x79, 0x45, 0xb3, 0xe2, 0x53, 0x69, 0x65, 0x61, 0xa5, 0xae, 0xaa, 0x2f, 0x3b, 0x36, 0xaf, 0xce, 0xad, 0xfa, 0x4d, 0xc7, 0x42, 0x5, 0x3d, 0xd8, 0xcf, 0xea, 0x13, 0x11, 0xb5, 0x79, 0x87, 0x67, 0x3c, 0x54, 0x98, 0x5d, 0xeb, 0xa6, 0x1e, 0xd9, 0x89, 0xf1, 0x4c, 0x8d, 0x52, 0x65, 0x54, 0xb6, 0xf9}

	r.True(cache.Set(encryptedKey, key, 1))
	cache.Wait()

	kmsCrypter := &KMSCrypter{
		client: s.client,
		keyID:  KmsKeyAlias,
		cache:  cache,
	}

	_, ok := kmsCrypter.cache.Get(encryptedKey)
	r.True(ok)

	plaintext := "Hello World"

	ciphertext := []byte{0x8c, 0x4b, 0x61, 0x72, 0x6e, 0x3a, 0x61, 0x77, 0x73, 0x3a, 0x6b, 0x6d, 0x73, 0x3a, 0x65, 0x75, 0x2d, 0x77, 0x65, 0x73, 0x74, 0x2d, 0x32, 0x3a, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x3a, 0x6b, 0x65, 0x79, 0x2f, 0x62, 0x38, 0x66, 0x61, 0x63, 0x30, 0x34, 0x63, 0x2d, 0x65, 0x64, 0x38, 0x31, 0x2d, 0x34, 0x32, 0x38, 0x33, 0x2d, 0x38, 0x38, 0x35, 0x37, 0x2d, 0x37, 0x62, 0x39, 0x66, 0x63, 0x65, 0x32, 0x35, 0x62, 0x63, 0x33, 0x64, 0x0, 0x0, 0x0, 0x0, 0xfb, 0x25, 0xe9, 0x99, 0xab, 0xde, 0xb8, 0xc4, 0x99, 0xbb, 0x1f, 0x79, 0x45, 0xb3, 0xe2, 0x53, 0x69, 0x65, 0x61, 0xa5, 0xae, 0xaa, 0x2f, 0x3b, 0x36, 0xaf, 0xce, 0xad, 0xfa, 0x4d, 0xc7, 0x42, 0x5, 0x3d, 0xd8, 0xcf, 0xea, 0x13, 0x11, 0xb5, 0x79, 0x87, 0x67, 0x3c, 0x54, 0x98, 0x5d, 0xeb, 0xa6, 0x1e, 0xd9, 0x89, 0xf1, 0x4c, 0x8d, 0x52, 0x65, 0x54, 0xb6, 0xf9, 0x87, 0xd0, 0x9b, 0xc2, 0x5f, 0x7e, 0x64, 0xa, 0xdf, 0x3, 0xb3, 0xea, 0x70, 0xb8, 0x7d, 0xb8, 0x49, 0xa5, 0xf9, 0x26, 0x39, 0x39, 0xc, 0x62, 0x9a, 0x5e, 0x47, 0x5c, 0x48, 0xe4, 0x8e, 0xe8, 0x91, 0x61, 0x70, 0xd5, 0xdd, 0x2e, 0x5d}

	reader := bytes.NewReader(ciphertext)
	writer := new(bytes.Buffer)

	err := kmsCrypter.Decrypt(writer, reader)
	r.Nil(err)
	r.Equal(plaintext, writer.String())
}

func Test_KMSCrypterTestSuite(t *testing.T) {
	suite.Run(t, new(KMSCrypterTestSuite))
}
